# Generated by Django 5.0.6 on 2024-08-06 09:41

import accounts.utils
import accounts.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegistrationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('token', models.CharField(default=accounts.utils.generate_registration_token, max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=128, null=True, verbose_name='password')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=11, verbose_name='Баланс')),
                ('bonus_balance', models.DecimalField(decimal_places=2, default=0, max_digits=11, verbose_name='Бонусный баланс')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('phone_number', models.CharField(blank=True, help_text='Введите номер телефона в формате +7-xxx-xxx-xx-xx', max_length=16, null=True, validators=[accounts.validators.phone_number_validator])),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город проживания')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(blank=True, choices=[('MAN', 'Мужчина'), ('WOMAN', 'Женщина')], max_length=5, null=True, verbose_name='Пол')),
                ('citizenship', models.CharField(blank=True, choices=[('RU', 'Российская Федерация'), ('AZ', 'Азербайджан'), ('AM', 'Армения'), ('BY', 'Республика Беларусь'), ('GE', 'Грузия'), ('KG', 'Киргизия'), ('MD', 'Молдавия'), ('KZ', 'Казахстан'), ('TJ', 'Таджикистан'), ('UZ', 'Узбекистан'), ('UA', 'Украина')], max_length=255, null=True, verbose_name='Гражданство')),
                ('job', models.CharField(blank=True, max_length=255, null=True, verbose_name='Место работы')),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='Должность')),
                ('snils', models.CharField(blank=True, max_length=255, null=True, validators=[accounts.validators.snils_validator], verbose_name='СНИЛС')),
                ('education_degree', models.CharField(blank=True, choices=[('HIGHER', 'Высшее'), ('SECONDARY', 'Среднее профессиональное')], max_length=255, null=True, verbose_name='Образование')),
                ('diploma_series', models.CharField(blank=True, max_length=255, null=True, verbose_name='Серия диплома')),
                ('diploma_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Номер диплома')),
                ('graduation_date', models.CharField(blank=True, max_length=4, null=True, verbose_name='Год получения диплома')),
                ('qualification', models.CharField(blank=True, max_length=4, null=True, verbose_name='Квалификация в соответствии с документом об образовании')),
                ('delivery_country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Страна доставки')),
                ('delivery_region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Регион доставки')),
                ('delivery_city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город доставки')),
                ('delivery_street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Улица доставки')),
                ('delivery_flat', models.CharField(blank=True, max_length=255, null=True, verbose_name='Квартира доставки')),
                ('post_index', models.CharField(blank=True, max_length=255, null=True, verbose_name='Почтовый индекс')),
                ('number_of_coupons', models.IntegerField(default=0, verbose_name='Количество бонусных купонов')),
                ('avatar', models.FileField(blank=True, null=True, upload_to='user/avatars', verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
